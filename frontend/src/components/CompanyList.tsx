import React, { useState } from 'react';
import { useQuery } from '@tanstack/react-query';
import { companyAPI } from '@/api/index';
import CompanyCard from './CompanyCard';
import { Company, CompanyListProps, CompanyFilters, CompanyStatus } from '@/types';

const CompanyList: React.FC<CompanyListProps> = ({ onEditCompany }) => {
  const [page, setPage] = useState<number>(1);
  const [filters, setFilters] = useState<CompanyFilters>({
    name: '',
    idn: '',
    status: ''
  });

  // –ó–∞–ø—Ä–æ—Å —Å–ø–∏—Å–∫–∞ –∫–æ–º–ø–∞–Ω–∏–π
  const {
    data: companiesResponse,
    isLoading,
    isError,
    error,
  } = useQuery({
    queryKey: ['companies', page, filters],
    queryFn: () => companyAPI.getCompanies(page, 10, filters),
  });

  // –ó–∞–ø—Ä–æ—Å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
  const { data: statsResponse } = useQuery({
    queryKey: ['companyStats'],
    queryFn: () => companyAPI.getStats(),
  });

  const handleFilterChange = (
    field: keyof CompanyFilters,
    value: string | CompanyStatus | ''
  ): void => {
    setFilters((prev) => ({
      ...prev,
      [field]: value,
    }));
    setPage(1); // –°–±—Ä–∞—Å—ã–≤–∞–µ–º –Ω–∞ –ø–µ—Ä–≤—É—é —Å—Ç—Ä–∞–Ω–∏—Ü—É –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ —Ñ–∏–ª—å—Ç—Ä–æ–≤
  };

  const handleClearFilters = (): void => {
    setFilters({
      name: '',
      idn: '',
      status: ''
    });
    setPage(1);
  };

  if (isLoading) {
    return <div className="loading">‚è≥ –ó–∞–≥—Ä—É–∑–∫–∞ –∫–æ–º–ø–∞–Ω–∏–π...</div>;
  }

  if (isError) {
    return (
      <div className="error">
        ‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∫–æ–º–ø–∞–Ω–∏–π: {error instanceof Error ? error.message : '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞'}
      </div>
    );
  }

  const companies = companiesResponse?.data?.companies || [];
  const pagination = companiesResponse?.data?.pagination;
  const stats = statsResponse?.data;

  return (
    <div className="company-list">
      {/* –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ */}
      {stats && (
        <div className="stats-panel">
          <div className="stat-item">
            <span className="stat-label">–í—Å–µ–≥–æ –∫–æ–º–ø–∞–Ω–∏–π:</span>
            <span className="stat-value">{stats.total_companies}</span>
          </div>
          <div className="stat-item">
            <span className="stat-label">–ê–∫—Ç–∏–≤–Ω—ã–µ:</span>
            <span className="stat-value status-10">{stats.status_10_count}</span>
          </div>
          <div className="stat-item">
            <span className="stat-label">–ù–µ–∞–∫—Ç–∏–≤–Ω—ã–µ:</span>
            <span className="stat-value status-20">{stats.status_20_count}</span>
          </div>
          <div className="stat-item">
            <span className="stat-label">–í—Å–µ–≥–æ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤:</span>
            <span className="stat-value">{stats.total_employees}</span>
          </div>
        </div>
      )}

      {/* –§–∏–ª—å—Ç—Ä—ã */}
      <div className="filters">
        <h3>–§–∏–ª—å—Ç—Ä—ã</h3>
        <div className="filter-row">
          <div className="filter-group">
            <label htmlFor="filter-name">–ù–∞–∑–≤–∞–Ω–∏–µ –∫–æ–º–ø–∞–Ω–∏–∏:</label>
            <input
              type="text"
              id="filter-name"
              value={filters.name || ''}
              onChange={(e) => handleFilterChange('name', e.target.value)}
              placeholder="–ü–æ–∏—Å–∫ –ø–æ –Ω–∞–∑–≤–∞–Ω–∏—é..."
            />
          </div>

          <div className="filter-group">
            <label htmlFor="filter-idn">–ò–ù–ù:</label>
            <input
              type="text"
              id="filter-idn"
              value={filters.idn || ''}
              onChange={(e) => handleFilterChange('idn', e.target.value)}
              placeholder="–ü–æ–∏—Å–∫ –ø–æ –ò–ù–ù..."
            />
          </div>

          <div className="filter-group">
            <label htmlFor="filter-status">–°—Ç–∞—Ç—É—Å:</label>
            <select
              id="filter-status"
              value={filters.status?.toString() || ''}
              onChange={(e) =>
                handleFilterChange(
                  'status',
                  e.target.value ? parseInt(e.target.value) as CompanyStatus : ''
                )
              }
            >
              <option value="">–í—Å–µ —Å—Ç–∞—Ç—É—Å—ã</option>
              <option value={CompanyStatus.ACTIVE}>–ê–∫—Ç–∏–≤–Ω–∞—è</option>
              <option value={CompanyStatus.INACTIVE}>–ù–µ–∞–∫—Ç–∏–≤–Ω–∞—è</option>
            </select>
          </div>

          <button className="btn btn-clear" onClick={handleClearFilters}>
            üîÑ –°–±—Ä–æ—Å–∏—Ç—å —Ñ–∏–ª—å—Ç—Ä—ã
          </button>
        </div>
      </div>

      {/* –°–ø–∏—Å–æ–∫ –∫–æ–º–ø–∞–Ω–∏–π */}
      {companies.length === 0 ? (
        <div className="no-data">
          <p>üìã –ö–æ–º–ø–∞–Ω–∏–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã</p>
          <p>–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –∏–∑–º–µ–Ω–∏—Ç—å —Ñ–∏–ª—å—Ç—Ä—ã –∏–ª–∏ –¥–æ–±–∞–≤–∏—Ç—å –Ω–æ–≤—É—é –∫–æ–º–ø–∞–Ω–∏—é</p>
        </div>
      ) : (
        <div className="cards-grid">
          {companies.map((company: Company) => (
            <CompanyCard key={company.id} company={company} onEdit={onEditCompany} />
          ))}
        </div>
      )}

      {/* –ü–∞–≥–∏–Ω–∞—Ü–∏—è */}
      {pagination && pagination.totalPages > 1 && (
        <div className="pagination">
          <button
            className="btn btn-pagination"
            onClick={() => setPage((prev) => prev - 1)}
            disabled={!pagination.hasPrev}
          >
            ‚Üê –ü—Ä–µ–¥—ã–¥—É—â–∞—è
          </button>
          <span className="pagination-info">
            –°—Ç—Ä–∞–Ω–∏—Ü–∞ {pagination.currentPage} –∏–∑ {pagination.totalPages} (–≤—Å–µ–≥–æ:{' '}
            {pagination.totalCount})
          </span>
          <button
            className="btn btn-pagination"
            onClick={() => setPage((prev) => prev + 1)}
            disabled={!pagination.hasNext}
          >
            –°–ª–µ–¥—É—é—â–∞—è ‚Üí
          </button>
        </div>
      )}
    </div>
  );
};

export default CompanyList;
